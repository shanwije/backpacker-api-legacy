#!/usr/bin/env node
/* eslint-disable no-use-before-define */
/* eslint-disable no-shadow */
/* eslint-disable no-restricted-globals */
/**
 * Module dependencies.
 */
// import { v4 as uuidv4 } from 'uuid';

const nodemon = require('nodemon');
const debug = require('debug')('backpack-api:server');
const http = require('http');
const socketIO = require('socket.io');
const jwt = require('jsonwebtoken');
const _ = require('lodash');
const app = require('../app/app');
const handleSocket = require('../app/common/services/socket');
const {
    socketJWTAuth,
} = require('../app/common/middleware/auth/authorizationMiddleware');
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * setting up socket io for chat server.
 */
const io = socketIO(server);
// todo move this to authenticationMiddleware
io.use(async (socket, next) => {
    try {
        // eslint-disable-next-line no-param-reassign
        socket.user = await jwt.verify(
            _.split(socket.handshake.headers.authorization, ' ')[1],
            process.env.JWT_SECRET,
        );
        return next();
    } catch (err) {
        console.log(err.message);
        socket.emit('error', 'unauthorized');
    }
    return null;
});

handleSocket(io);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(
    port,
    console.log(
        `server running in ${process.env.NODE_ENV} mode on port ${port}`.yellow,
    ),
);

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * for unhandled promise rejections (especially db connections)
 */
// process.on('unhandledRejection', (err, promise) => {
//     console.error(`Error: ${JSON.stringify(err, null, '\t')}`);
//     runningServer.close(() => process.exit(1));
// });

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(`${bind} requires elevated privileges`);
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(`${bind} is already in use`);
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind =
        typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
    debug(`Listening on ${bind}`);
}

process

    // Handle normal exits
    .on('exit', (code) => {
        nodemon.emit('quit');
        process.exit(code);
    })

    // Handle CTRL+C
    .on('SIGINT', () => {
        nodemon.emit('quit');
        process.exit(0);
    });
